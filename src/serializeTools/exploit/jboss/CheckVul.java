package serializeTools.exploit.jboss;

import java.util.Map;

import serializeTools.Utils.HttpClient;
import serializeTools.Utils.ResponseStatus;
import serializeTools.Utils.UrlTools;

public class CheckVul 
{
	private final static CheckVul instance = new CheckVul();

	public static CheckVul getInstance()
	{
		return instance;
	}
	
	public String checkVul(String targetUrl,String targetEncoding) throws Exception
	{
		// TODO Auto-generated constructor stub
		String isVul = isVulnerable(targetUrl, targetEncoding);
		return isVul;
	}
	
	public String isVulnerable(String targetUrl,String targetEncoding) throws Exception
	{
		String returnValue = new String();
		String vulSource = "/invoker/JMXInvokerServlet";
		Map<String,String> checkResult = UrlTools.getInstance().checkValidate(targetUrl);
		String validate = checkResult.get("Validate");
		if(validate.equals("false"))
		{
			returnValue = "请检查测试目标URL是否正确";
		}
		else 
		{
			String scheme = checkResult.get("Scheme");
			String host = checkResult.get("Host");
			String port = checkResult.get("Port");
			String vulUrl = scheme+"://"+host+":"+port+vulSource;
			
			HttpClient client = new HttpClient();
			
			ResponseStatus response = client.get(vulUrl, targetEncoding);
			int statusCode = response.getStatusCode();
			switch (statusCode)
			{
			case 404:
				returnValue = "404|请确认目标Url是否正确";
				break;
			case 401:
				returnValue = "401|需要认证，请手动认证后再重试";
				break;
			case 500:
				returnValue = "500|系统异常，请手动检查";
				break;
			case 200:
				String contentType = response.getContentType().toString();
				if(contentType.indexOf("MarshalledValue") >= 0)
				{
					returnValue = "200|Vulnerable";
					break;
				}else{
					returnValue = "200|Not Vulnerable, the Response Type is" + contentType;
				}
			default:
				returnValue="未知错误，请手工验证";
			}
		}
		return returnValue;
	}
	
}
